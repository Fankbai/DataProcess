<scope doc="Utilities for writing code that runs on Python 2 and 3" ilk="blob" lang="Python" name="six" src="d:\Program Files (x86)\Python35-32\lib\site-packages\six.py"><import line="23" module="__future__" symbol="absolute_import" /><import line="25" module="functools" /><import line="26" module="itertools" /><import line="27" module="operator" /><import line="28" module="sys" /><import line="29" module="types" /><import line="625" module="struct" /><import line="631" module="io" /><import line="657" module="StringIO" /><variable citdl="str" line="31" name="__author__" /><variable citdl="str" line="32" name="__version__" /><variable citdl="bool" line="36" name="PY2" /><variable citdl="bool" line="37" name="PY3" /><variable citdl="bool" line="38" name="PY34" /><variable citdl="tuple" line="41" name="string_types" /><variable citdl="tuple" line="42" name="integer_types" /><variable citdl="tuple" line="43" name="class_types" /><variable citdl="str" line="44" name="text_type" /><variable citdl="str" line="45" name="binary_type" /><variable citdl="int()" line="47" name="MAXSIZE" /><scope classrefs="object" ilk="class" line="60" lineend="63" name="X"><scope ilk="function" line="62" lineend="63" name="__len__" returns="int" signature="__len__()"><variable citdl="X" ilk="argument" line="62" name="self" /></scope></scope><scope attributes="protected" doc="Add documentation to a function." ilk="function" line="75" lineend="77" name="_add_doc" signature="_add_doc(func, doc)"><variable ilk="argument" line="75" name="func" /><variable ilk="argument" line="75" name="doc" /></scope><scope attributes="protected" doc="Import module, returning the module after the last dot." ilk="function" line="80" lineend="83" name="_import_module" signature="_import_module(name)"><variable ilk="argument" line="80" name="name" /></scope><scope attributes="protected" classrefs="object" ilk="class" line="86" lineend="100" name="_LazyDescr"><scope attributes="__ctor__" ilk="function" line="88" lineend="89" name="__init__" signature="_LazyDescr(name)"><variable citdl="_LazyDescr" ilk="argument" line="88" name="self" /><variable ilk="argument" line="88" name="name" /></scope><variable attributes="__instancevar__" line="89" name="name" /><scope ilk="function" line="91" lineend="100" name="__get__" returns="self._resolve()" signature="__get__(obj, tp)"><variable citdl="_LazyDescr" ilk="argument" line="91" name="self" /><variable ilk="argument" line="91" name="obj" /><variable ilk="argument" line="91" name="tp" /><variable citdl="self._resolve()" line="92" name="result" /></scope></scope><scope classrefs="_LazyDescr" ilk="class" line="103" lineend="121" name="MovedModule"><scope attributes="__ctor__" ilk="function" line="105" lineend="112" name="__init__" signature="MovedModule(name, old, new=None)"><variable citdl="MovedModule" ilk="argument" line="105" name="self" /><variable ilk="argument" line="105" name="name" /><variable ilk="argument" line="105" name="old" /><variable ilk="argument" line="105" name="new" /></scope><variable attributes="__instancevar__" line="110" name="mod" /><scope attributes="protected" ilk="function" line="114" lineend="115" name="_resolve" returns="_import_module()" signature="_resolve()"><variable citdl="MovedModule" ilk="argument" line="114" name="self" /></scope><scope ilk="function" line="117" lineend="121" name="__getattr__" returns="getattr()" signature="__getattr__(attr)"><variable citdl="MovedModule" ilk="argument" line="117" name="self" /><variable ilk="argument" line="117" name="attr" /><variable attributes="protected" citdl="_resolve()" line="118" name="_module" /><variable citdl="getattr()" line="119" name="value" /></scope></scope><scope attributes="protected" classrefs="types.ModuleType" ilk="class" line="124" lineend="136" name="_LazyModule"><scope attributes="__ctor__" ilk="function" line="126" lineend="128" name="__init__" signature="_LazyModule(name)"><variable citdl="_LazyModule" ilk="argument" line="126" name="self" /><variable ilk="argument" line="126" name="name" /></scope><variable attributes="__instancevar__" citdl="self.__class__.__doc__" line="128" name="__doc__" /><scope ilk="function" line="130" lineend="133" name="__dir__" returns="list" signature="__dir__()"><variable citdl="_LazyModule" ilk="argument" line="130" name="self" /><variable citdl="list" line="131" name="attrs" /></scope><variable attributes="protected" citdl="list" line="136" name="_moved_attributes" /></scope><scope classrefs="_LazyDescr" ilk="class" line="139" lineend="161" name="MovedAttribute"><scope attributes="__ctor__" ilk="function" line="141" lineend="157" name="__init__" signature="MovedAttribute(name, old_mod, new_mod, old_attr=None, new_attr=None)"><variable citdl="MovedAttribute" ilk="argument" line="141" name="self" /><variable ilk="argument" line="141" name="name" /><variable ilk="argument" line="141" name="old_mod" /><variable ilk="argument" line="141" name="new_mod" /><variable ilk="argument" line="141" name="old_attr" /><variable ilk="argument" line="141" name="new_attr" /></scope><variable attributes="__instancevar__" line="146" name="mod" /><variable attributes="__instancevar__" line="152" name="attr" /><scope attributes="protected" ilk="function" line="159" lineend="161" name="_resolve" returns="getattr()" signature="_resolve()"><variable citdl="MovedAttribute" ilk="argument" line="159" name="self" /><variable citdl="_import_module()" line="160" name="module" /></scope></scope><scope attributes="protected" classrefs="object" doc="A meta path importer to import six.moves and its submodules.&#10;&#10;This class implements a PEP302 finder and loader. It should be compatible&#10;with Python 2.5 and all existing versions of Python3" ilk="class" line="164" lineend="224" name="_SixMetaPathImporter"><scope attributes="__ctor__" ilk="function" line="173" lineend="175" name="__init__" signature="_SixMetaPathImporter(six_module_name)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="173" name="self" /><variable ilk="argument" line="173" name="six_module_name" /></scope><variable attributes="__instancevar__" line="174" name="name" /><variable attributes="__instancevar__" citdl="dict" line="175" name="known_modules" /><scope attributes="protected" ilk="function" line="177" lineend="179" name="_add_module" signature="_add_module(*mod)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="177" name="self" /><variable attributes="varargs" ilk="argument" line="177" name="mod" /><variable line="178" name="fullname" /></scope><scope attributes="protected" ilk="function" line="181" lineend="182" name="_get_module" signature="_get_module(fullname)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="181" name="self" /><variable ilk="argument" line="181" name="fullname" /></scope><scope ilk="function" line="184" lineend="187" name="find_module" returns="_SixMetaPathImporter" signature="find_module(fullname, path=None)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="184" name="self" /><variable ilk="argument" line="184" name="fullname" /><variable ilk="argument" line="184" name="path" /></scope><scope attributes="private" ilk="function" line="189" lineend="193" name="__get_module" signature="__get_module(fullname)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="189" name="self" /><variable ilk="argument" line="189" name="fullname" /></scope><scope ilk="function" line="195" lineend="207" name="load_module" returns="__get_module()" signature="load_module(fullname)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="195" name="self" /><variable ilk="argument" line="195" name="fullname" /><variable citdl="mod._resolve()" line="201" name="mod" /></scope><scope doc="Return true, if the named module is a package.&#10;&#10;We need this method to get correct spec objects with&#10;Python 3.4 (see PEP451)" ilk="function" line="209" lineend="216" name="is_package" returns="hasattr()" signature="is_package(fullname)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="209" name="self" /><variable ilk="argument" line="209" name="fullname" /></scope><scope doc="Return None&#10;&#10;Required, if is_package is implemented" ilk="function" line="218" lineend="223" name="get_code" signature="get_code(fullname)"><variable citdl="_SixMetaPathImporter" ilk="argument" line="218" name="self" /><variable ilk="argument" line="218" name="fullname" /></scope><variable citdl="_SixMetaPathImporter.get_code" line="224" name="get_source" /></scope><variable attributes="protected" citdl="_SixMetaPathImporter" line="226" name="_importer" /><scope attributes="protected" classrefs="_LazyModule" doc="Lazy loading of moved objects" ilk="class" line="229" lineend="232" name="_MovedItems"><variable citdl="list" line="232" name="__path__" /><variable attributes="protected __instancevar__" citdl="list" line="314" name="_moved_attributes" /></scope><variable attributes="protected" citdl="list" line="235" name="_moved_attributes" /><variable line="308" name="attr" /><variable citdl="_MovedItems" line="316" name="moves" /><scope classrefs="_LazyModule" doc="Lazy loading of moved objects in six.moves.urllib_parse" ilk="class" line="320" lineend="322" name="Module_six_moves_urllib_parse"><variable attributes="protected __instancevar__" citdl="list" line="354" name="_moved_attributes" /></scope><variable attributes="protected" citdl="list" line="325" name="_urllib_parse_moved_attributes" /><scope classrefs="_LazyModule" doc="Lazy loading of moved objects in six.moves.urllib_error" ilk="class" line="360" lineend="362" name="Module_six_moves_urllib_error"><variable attributes="protected __instancevar__" citdl="list" line="374" name="_moved_attributes" /></scope><variable attributes="protected" citdl="list" line="365" name="_urllib_error_moved_attributes" /><scope classrefs="_LazyModule" doc="Lazy loading of moved objects in six.moves.urllib_request" ilk="class" line="380" lineend="382" name="Module_six_moves_urllib_request"><variable attributes="protected __instancevar__" citdl="list" line="424" name="_moved_attributes" /></scope><variable attributes="protected" citdl="list" line="385" name="_urllib_request_moved_attributes" /><scope classrefs="_LazyModule" doc="Lazy loading of moved objects in six.moves.urllib_response" ilk="class" line="430" lineend="432" name="Module_six_moves_urllib_response"><variable attributes="protected __instancevar__" citdl="list" line="445" name="_moved_attributes" /></scope><variable attributes="protected" citdl="list" line="435" name="_urllib_response_moved_attributes" /><scope classrefs="_LazyModule" doc="Lazy loading of moved objects in six.moves.urllib_robotparser" ilk="class" line="451" lineend="453" name="Module_six_moves_urllib_robotparser"><variable attributes="protected __instancevar__" citdl="list" line="463" name="_moved_attributes" /></scope><variable attributes="protected" citdl="list" line="456" name="_urllib_robotparser_moved_attributes" /><scope classrefs="types.ModuleType" doc="Create a six.moves.urllib namespace that resembles the Python 3 namespace" ilk="class" line="469" lineend="480" name="Module_six_moves_urllib"><variable citdl="list" line="472" name="__path__" /><variable citdl="_importer._get_module()" line="473" name="parse" /><variable citdl="_importer._get_module()" line="474" name="error" /><variable citdl="_importer._get_module()" line="475" name="request" /><variable citdl="_importer._get_module()" line="476" name="response" /><variable citdl="_importer._get_module()" line="477" name="robotparser" /><scope ilk="function" line="479" lineend="480" name="__dir__" returns="list" signature="__dir__()"><variable citdl="Module_six_moves_urllib" ilk="argument" line="479" name="self" /></scope></scope><scope doc="Add an item to six.moves." ilk="function" line="486" lineend="488" name="add_move" signature="add_move(move)"><variable ilk="argument" line="486" name="move" /></scope><scope doc="Remove item from six.moves." ilk="function" line="491" lineend="499" name="remove_move" signature="remove_move(name)"><variable ilk="argument" line="491" name="name" /></scope><variable attributes="protected" citdl="str" line="503" name="_meth_func" /><variable attributes="protected" citdl="str" line="504" name="_meth_self" /><variable attributes="protected" citdl="str" line="506" name="_func_closure" /><variable attributes="protected" citdl="str" line="507" name="_func_code" /><variable attributes="protected" citdl="str" line="508" name="_func_defaults" /><variable attributes="protected" citdl="str" line="509" name="_func_globals" /><scope ilk="function" line="523" lineend="524" name="advance_iterator" returns="it.next()" signature="advance_iterator(it)"><variable ilk="argument" line="523" name="it" /></scope><variable citdl="advance_iterator" line="525" name="next" /><variable citdl="callable" line="531" name="callable" /><scope ilk="function" line="546" lineend="547" name="get_unbound_function" returns="unbound.im_func" signature="get_unbound_function(unbound)"><variable ilk="argument" line="546" name="unbound" /></scope><scope ilk="function" line="549" lineend="550" name="create_bound_method" returns="types.MethodType()" signature="create_bound_method(func, obj)"><variable ilk="argument" line="549" name="func" /><variable ilk="argument" line="549" name="obj" /></scope><scope ilk="function" line="552" lineend="553" name="create_unbound_method" returns="types.MethodType()" signature="create_unbound_method(func, cls)"><variable ilk="argument" line="552" name="func" /><variable ilk="argument" line="552" name="cls" /></scope><scope classrefs="object" ilk="class" line="555" lineend="558" name="Iterator"><scope ilk="function" line="557" lineend="558" name="next" signature="next()"><variable citdl="Iterator" ilk="argument" line="557" name="self" /></scope></scope><variable citdl="operator.attrgetter()" line="565" name="get_method_function" /><variable citdl="operator.attrgetter()" line="566" name="get_method_self" /><variable citdl="operator.attrgetter()" line="567" name="get_function_closure" /><variable citdl="operator.attrgetter()" line="568" name="get_function_code" /><variable citdl="operator.attrgetter()" line="569" name="get_function_defaults" /><variable citdl="operator.attrgetter()" line="570" name="get_function_globals" /><variable citdl="operator.methodcaller()" line="586" name="viewkeys" /><variable citdl="operator.methodcaller()" line="588" name="viewvalues" /><variable citdl="operator.methodcaller()" line="590" name="viewitems" /><scope ilk="function" line="592" lineend="593" name="iterkeys" returns="d.iterkeys()" signature="iterkeys(**d)"><variable attributes="kwargs" ilk="argument" line="592" name="d" /></scope><scope ilk="function" line="595" lineend="596" name="itervalues" returns="d.itervalues()" signature="itervalues(**d)"><variable attributes="kwargs" ilk="argument" line="595" name="d" /></scope><scope ilk="function" line="598" lineend="599" name="iteritems" returns="d.iteritems()" signature="iteritems(**d)"><variable attributes="kwargs" ilk="argument" line="598" name="d" /></scope><scope ilk="function" line="601" lineend="602" name="iterlists" returns="d.iterlists()" signature="iterlists(**d)"><variable attributes="kwargs" ilk="argument" line="601" name="d" /></scope><variable citdl="chr" line="624" name="unichr" /><variable citdl="chr" line="626" name="int2byte" /><variable citdl="iter" line="630" name="iterbytes" /><variable citdl="io.StringIO" line="632" name="StringIO" /><variable citdl="io.BytesIO" line="633" name="BytesIO" /><variable attributes="protected" citdl="str" line="634" name="_assertCountEqual" /><variable attributes="protected" citdl="str" line="636" name="_assertRaisesRegex" /><variable attributes="protected" citdl="str" line="637" name="_assertRegex" /><scope ilk="function" line="642" lineend="643" name="b" signature="b(s)"><variable ilk="argument" line="642" name="s" /></scope><scope ilk="function" line="646" lineend="647" name="u" returns="str()" signature="u(s)"><variable ilk="argument" line="646" name="s" /></scope><scope ilk="function" line="651" lineend="652" name="byte2int" returns="ord()" signature="byte2int(bs)"><variable ilk="argument" line="651" name="bs" /></scope><scope ilk="function" line="654" lineend="655" name="indexbytes" returns="ord()" signature="indexbytes(buf, i)"><variable ilk="argument" line="654" name="buf" /><variable ilk="argument" line="654" name="i" /></scope><scope ilk="function" line="666" lineend="667" name="assertCountEqual" returns="getattr()()" signature="assertCountEqual(**self)"><variable attributes="kwargs" ilk="argument" line="666" name="self" /></scope><scope ilk="function" line="670" lineend="671" name="assertRaisesRegex" returns="getattr()()" signature="assertRaisesRegex(**self)"><variable attributes="kwargs" ilk="argument" line="670" name="self" /></scope><scope ilk="function" line="674" lineend="675" name="assertRegex" returns="getattr()()" signature="assertRegex(**self)"><variable attributes="kwargs" ilk="argument" line="674" name="self" /></scope><scope ilk="function" line="681" lineend="686" name="reraise" signature="reraise(tp, value, tb=None)"><variable ilk="argument" line="681" name="tp" /><variable citdl="tp()" ilk="argument" line="681" name="value" /><variable ilk="argument" line="681" name="tb" /></scope><scope doc="Execute code in a namespace." ilk="function" line="689" lineend="699" name="exec_" signature="exec_(_code_, _globs_=None, _locs_=None)"><variable ilk="argument" line="689" name="_code_" /><variable citdl="frame.f_globals" ilk="argument" line="689" name="_globs_" /><variable citdl="frame.f_locals" ilk="argument" line="689" name="_locs_" /><variable citdl="sys._getframe()" line="692" name="frame" /></scope><scope ilk="function" line="718" lineend="719" name="raise_from" signature="raise_from(value, from_value)"><variable ilk="argument" line="718" name="value" /><variable ilk="argument" line="718" name="from_value" /></scope><variable attributes="protected" citdl="print_" line="778" name="_print" /><scope ilk="function" line="780" lineend="785" name="print_" signature="print_()"><variable citdl="kwargs.get()" line="781" name="fp" /><variable citdl="kwargs.pop()" line="782" name="flush" /></scope><variable citdl="function" line="790" name="wraps" /><scope doc="Create a base class with a metaclass." ilk="function" line="801" lineend="810" name="with_metaclass" returns="type.__new__()" signature="with_metaclass(*meta)"><variable attributes="varargs" ilk="argument" line="801" name="meta" /><scope classrefs="" ilk="class" line="806" lineend="809" name="metaclass"><scope ilk="function" line="808" lineend="809" name="__new__" returns="with_metaclass.meta()" signature="__new__(name, this_bases, d)"><variable citdl="metaclass" ilk="argument" line="808" name="cls" /><variable ilk="argument" line="808" name="name" /><variable ilk="argument" line="808" name="this_bases" /><variable ilk="argument" line="808" name="d" /></scope></scope></scope><scope doc="Class decorator for creating a class with a metaclass." ilk="function" line="813" lineend="826" name="add_metaclass" returns="add_metaclass.wrapper" signature="add_metaclass(metaclass)"><variable ilk="argument" line="813" name="metaclass" /><scope ilk="function" line="815" lineend="825" name="wrapper" returns="add_metaclass.metaclass()" signature="wrapper(cls)"><variable ilk="argument" line="815" name="cls" /><variable citdl="cls.__dict__.copy()" line="816" name="orig_vars" /><variable citdl="list" line="817" name="slots" /><variable line="821" name="slots_var" /></scope></scope><scope doc="A decorator that defines __unicode__ and __str__ methods under Python 2.&#10;Under Python 3 it does nothing.&#10;&#10;To support Python 2 and 3 with a single code base, define a __str__ method&#10;returning text and apply this decorator to the class." ilk="function" line="829" lineend="844" name="python_2_unicode_compatible" signature="python_2_unicode_compatible(klass)"><variable ilk="argument" line="829" name="klass" /></scope><variable citdl="list" line="850" name="__path__" /><variable citdl="__name__" line="851" name="__package__" /><variable line="858" name="i" /><variable line="858" name="importer" /></scope>