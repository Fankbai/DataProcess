<scope doc="This is an object-oriented plotting library." ilk="blob" lang="Python" name="__init__" src="d:\Program Files (x86)\Python35-32\lib\site-packages\matplotlib\__init__.py"><import line="102" module="__future__" symbol="absolute_import" /><import line="102" module="__future__" symbol="division" /><import line="102" module="__future__" symbol="print_function" /><import line="102" module="__future__" symbol="unicode_literals" /><import line="105" module="matplotlib.externals" symbol="six" /><import line="106" module="sys" /><import line="107" module="distutils.version" /><import line="108" module="itertools" symbol="chain" /><import line="110" module="io" /><import line="111" module="inspect" /><import line="112" module="locale" /><import line="113" module="os" /><import line="114" module="re" /><import line="115" module="tempfile" /><import line="116" module="warnings" /><import line="117" module="contextlib" /><import line="118" module="distutils.sysconfig" /><import line="119" module="functools" /><import line="122" module="matplotlib.cbook" symbol="is_string_like" /><import line="122" module="matplotlib.cbook" symbol="mplDeprecation" /><import line="122" module="matplotlib.cbook" symbol="dedent" /><import line="122" module="matplotlib.cbook" symbol="get_label" /><import line="123" module="matplotlib.compat" symbol="subprocess" /><import line="124" module="matplotlib.rcsetup" symbol="defaultParams" /><import line="124" module="matplotlib.rcsetup" symbol="validate_backend" /><import line="124" module="matplotlib.rcsetup" symbol="cycler" /><import line="128" module="numpy" /><import line="129" module="matplotlib.externals.six.moves.urllib.request" symbol="urlopen" /><import alias="reload" line="130" module="matplotlib.externals.six.moves" symbol="reload_module" /><import line="134" module="._version" symbol="get_versions" /><import line="141" module="dateutil" /><import line="166" module="pyparsing" /><variable citdl="str()" line="135" name="__version__" /><variable citdl="str()" line="138" name="__version__numpy__" /><scope doc="return True if a is greater than or equal to b" ilk="function" line="146" lineend="158" name="compare_versions" returns="bool" signature="compare_versions(a, b)"><variable citdl="a.decode()" ilk="argument" line="146" name="a" /><variable citdl="b.decode()" ilk="argument" line="146" name="b" /></scope><variable citdl="pyparsing.Forward()" line="176" name="f" /><variable citdl="bool" line="178" name="bad_pyparsing" /><scope attributes="protected" ilk="function" line="189" lineend="191" name="_forward_ilshift" signature="_forward_ilshift(self, other)"><variable ilk="argument" line="189" name="self" /><variable ilk="argument" line="189" name="other" /></scope><variable attributes="protected" citdl="bool" line="200" name="_python26" /><scope attributes="protected" doc="p is a string pointing to a putative writable dir -- return True p&#10;is such a string, else False" ilk="function" line="212" lineend="238" name="_is_writable_dir" returns="bool" signature="_is_writable_dir(p)"><variable ilk="argument" line="212" name="p" /><variable citdl="tempfile.TemporaryFile()" line="230" name="t" /></scope><scope classrefs="object" doc="A class to handle reporting.  Set the fileo attribute to any file&#10;instance to handle the output.  Default is sys.stdout" ilk="class" line="241" lineend="334" name="Verbose"><variable citdl="tuple" line="246" name="levels" /><variable citdl="dict()" line="247" name="vald" /><variable attributes="protected" line="251" name="_commandLineVerbose" /><variable line="253" name="arg" /><variable line="258" name="level_str" /><scope attributes="__ctor__" ilk="function" line="265" lineend="267" name="__init__" signature="Verbose()"><variable citdl="Verbose" ilk="argument" line="265" name="self" /></scope><variable attributes="__instancevar__" citdl="sys.stdout" line="267" name="fileo" /><scope doc="set the verbosity to one of the Verbose.levels strings" ilk="function" line="269" lineend="278" name="set_level" signature="set_level(level)"><variable citdl="Verbose" ilk="argument" line="269" name="self" /><variable ilk="argument" line="269" name="level" /></scope><variable attributes="__instancevar__" line="278" name="level" /><scope ilk="function" line="280" lineend="295" name="set_fileo" signature="set_fileo(fname)"><variable citdl="Verbose" ilk="argument" line="280" name="self" /><variable ilk="argument" line="280" name="fname" /><variable citdl="dict" line="281" name="std" /><variable citdl="open()" line="289" name="fileo" /></scope><scope doc="        print_(message s to self.fileo if self.level&gt;=level.  Return&#10;)&#10;        value indicates whether a message was issued&#10;&#10;        " ilk="function" line="297" lineend="307" name="report" returns="bool" signature="report(s, level='helpful')"><variable citdl="Verbose" ilk="argument" line="297" name="self" /><variable ilk="argument" line="297" name="s" /><variable citdl="str" ilk="argument" line="297" name="level" /></scope><scope doc="return a callable function that wraps func and reports it&#10;output through the verbose handler if current verbosity level&#10;is higher than level&#10;&#10;if always is True, the report will occur on every function&#10;call; otherwise only on the first time the function is called" ilk="function" line="309" lineend="330" name="wrap" returns="Verbose.wrap.wrapper" signature="wrap(fmt, func, level='helpful', always=True)"><variable citdl="Verbose" ilk="argument" line="309" name="self" /><variable ilk="argument" line="309" name="fmt" /><variable ilk="argument" line="309" name="func" /><variable citdl="str" ilk="argument" line="309" name="level" /><variable citdl="True" ilk="argument" line="309" name="always" /><scope ilk="function" line="320" lineend="327" name="wrapper" returns="func()" signature="wrapper()"><variable citdl="func()" line="321" name="ret" /><variable citdl="report()" line="324" name="spoke" /><variable attributes="protected" citdl="False" line="326" name="_spoke" /><variable citdl="func.__doc__" line="329" name="__doc__" /></scope></scope><scope doc="return true if self.level is &gt;= level" ilk="function" line="332" lineend="334" name="ge" returns="bool" signature="ge(level)"><variable citdl="Verbose" ilk="argument" line="332" name="self" /><variable ilk="argument" line="332" name="level" /></scope></scope><variable citdl="Verbose" line="337" name="verbose" /><scope ilk="function" line="340" lineend="349" name="checkdep_dvipng" signature="checkdep_dvipng()"><variable citdl="subprocess.Popen()" line="342" name="s" /><variable line="344" name="stdout" /><variable line="344" name="stderr" /><variable line="345" name="line" /><variable line="346" name="v" /></scope><scope ilk="function" line="352" lineend="368" name="checkdep_ghostscript" returns="tuple" signature="checkdep_ghostscript()"><variable citdl="list" line="354" name="gs_execs" /><variable line="357" name="gs_exec" /><variable citdl="subprocess.Popen()" line="359" name="s" /><variable line="362" name="stdout" /><variable line="362" name="stderr" /><variable line="364" name="v" /></scope><scope ilk="function" line="371" lineend="382" name="checkdep_tex" returns="match.group()" signature="checkdep_tex()"><variable citdl="subprocess.Popen()" line="373" name="s" /><variable line="375" name="stderr" /><variable line="375" name="stdout" /><variable line="376" name="line" /><variable citdl="str" line="377" name="pattern" /><variable citdl="re.search()" line="378" name="match" /><variable citdl="match.group()" line="379" name="v" /></scope><scope ilk="function" line="385" lineend="396" name="checkdep_pdftops" signature="checkdep_pdftops()"><variable citdl="subprocess.Popen()" line="387" name="s" /><variable line="389" name="stdout" /><variable line="389" name="stderr" /><variable line="390" name="lines" /><variable line="391" name="line" /><variable line="393" name="v" /></scope><scope ilk="function" line="399" lineend="411" name="checkdep_inkscape" signature="checkdep_inkscape()"><variable citdl="subprocess.Popen()" line="401" name="s" /><variable line="403" name="stdout" /><variable line="403" name="stderr" /><variable line="404" name="lines" /><variable line="405" name="line" /><variable line="407" name="v" /></scope><scope ilk="function" line="414" lineend="426" name="checkdep_xmllint" signature="checkdep_xmllint()"><variable citdl="subprocess.Popen()" line="416" name="s" /><variable line="418" name="stdout" /><variable line="418" name="stderr" /><variable line="419" name="lines" /><variable line="420" name="line" /><variable line="422" name="v" /></scope><scope ilk="function" line="429" lineend="467" name="checkdep_ps_distiller" returns="bool" signature="checkdep_ps_distiller(s)"><variable ilk="argument" line="429" name="s" /><variable citdl="False" line="433" name="flag" /><variable citdl="str" line="434" name="gs_req" /><variable citdl="str" line="435" name="gs_sugg" /><variable line="436" name="gs_v" /><variable line="436" name="gs_exec" /><variable citdl="str" line="450" name="pdftops_req" /><variable citdl="str" line="451" name="pdftops_req_alt" /><variable citdl="checkdep_pdftops()" line="452" name="pdftops_v" /></scope><scope ilk="function" line="470" lineend="511" name="checkdep_usetex" returns="bool" signature="checkdep_usetex(s)"><variable ilk="argument" line="470" name="s" /><variable citdl="str" line="474" name="tex_req" /><variable citdl="str" line="475" name="gs_req" /><variable citdl="str" line="476" name="gs_sugg" /><variable citdl="str" line="477" name="dvipng_req" /><variable citdl="False" line="478" name="flag" /><variable citdl="checkdep_tex()" line="480" name="tex_v" /><variable citdl="checkdep_dvipng()" line="489" name="dvipng_v" /><variable line="498" name="gs_exec" /><variable line="498" name="gs_v" /></scope><scope attributes="protected" doc="Find user's home directory if possible.&#10;Otherwise, returns None.&#10;&#10;:see:&#10;    http://mail.python.org/pipermail/python-list/2005-February/325395.html" ilk="function" line="514" lineend="536" name="_get_home" returns="os.path.expanduser()" signature="_get_home()"><variable citdl="os.environ.get()" line="523" name="path" /><variable line="532" name="evar" /></scope><scope attributes="protected" doc="If the config directory can not be created, create a temporary&#10;directory.&#10;&#10;Returns None if a writable temporary directory could not be created." ilk="function" line="539" lineend="561" name="_create_tmp_config_dir" returns="os.path.join()" signature="_create_tmp_config_dir()"><import line="546" module="getpass" /><import line="547" module="tempfile" /><import line="548" module="matplotlib.cbook" symbol="mkdirs" /><variable citdl="os.path.join()" line="551" name="tempdir" /></scope><variable citdl="verbose.wrap()" line="564" name="get_home" /><scope attributes="protected" doc="Returns the XDG configuration directory, according to the `XDG&#10;base directory spec&#10;&lt;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&gt;`_." ilk="function" line="567" lineend="578" name="_get_xdg_config_dir" returns="os.path.join()" signature="_get_xdg_config_dir()"><variable citdl="os.environ.get()" line="573" name="path" /></scope><scope attributes="protected" doc="Returns the XDG cache directory, according to the `XDG&#10;base directory spec&#10;&lt;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&gt;`_." ilk="function" line="581" lineend="592" name="_get_xdg_cache_dir" returns="os.path.join()" signature="_get_xdg_cache_dir()"><variable citdl="get_home()" line="587" name="path" /></scope><scope attributes="protected" ilk="function" line="595" lineend="627" name="_get_config_or_cache_dir" returns="os.path.join()" signature="_get_config_or_cache_dir(xdg_base)"><import line="596" module="matplotlib.cbook" symbol="mkdirs" /><variable ilk="argument" line="595" name="xdg_base" /><variable citdl="os.environ.get()" line="598" name="configdir" /><variable citdl="os.path.join()" line="608" name="p" /><variable citdl="get_home()" line="609" name="h" /></scope><scope attributes="protected" doc="Return the string representing the configuration directory.&#10;&#10;The directory is chosen as follows:&#10;&#10;1. If the MPLCONFIGDIR environment variable is supplied, choose that.&#10;&#10;2a. On Linux, if `$HOME/.matplotlib` exists, choose that, but warn that&#10;    that is the old location.  Barring that, follow the XDG specification&#10;    and look first in `$XDG_CONFIG_HOME`, if defined, or `$HOME/.config`.&#10;&#10;2b. On other platforms, choose `$HOME/.matplotlib`.&#10;&#10;3. If the chosen directory exists and is writable, use that as the&#10;   configuration directory.&#10;4. If possible, create a temporary directory, and use it as the&#10;   configuration directory.&#10;5. A writable directory could not be found or created; return None." ilk="function" line="630" lineend="650" name="_get_configdir" returns="_get_config_or_cache_dir()" signature="_get_configdir()" /><variable citdl="verbose.wrap()" line="652" name="get_configdir" /><scope attributes="protected" doc="Return the location of the cache directory.&#10;&#10;The procedure used to find the directory is the same as for&#10;_get_config_dir, except using `$XDG_CACHE_HOME`/`~/.cache` instead." ilk="function" line="655" lineend="662" name="_get_cachedir" returns="_get_config_or_cache_dir()" signature="_get_cachedir()" /><variable citdl="verbose.wrap()" line="664" name="get_cachedir" /><scope attributes="protected" ilk="function" line="667" lineend="671" name="_decode_filesystem_path" returns="path.decode()" signature="_decode_filesystem_path(path)"><variable ilk="argument" line="667" name="path" /></scope><scope attributes="protected" doc="get the path to matplotlib data" ilk="function" line="674" lineend="714" name="_get_data_path" returns="os.path.join()" signature="_get_data_path()"><import line="691" module="matplotlib.afm" /><variable citdl="os.path.join()" line="678" name="path" /><variable attributes="protected" citdl="_decode_filesystem_path()" line="684" name="_file" /><variable citdl="os.path.dirname()" line="699" name="exe_path" /></scope><scope attributes="protected" ilk="function" line="717" lineend="720" name="_get_data_path_cached" signature="_get_data_path_cached()" /><variable citdl="verbose.wrap()" line="722" name="get_data_path" /><scope doc="get_example_data is deprecated -- use matplotlib.cbook.get_sample_data&#10;instead" ilk="function" line="726" lineend="731" name="get_example_data" signature="get_example_data(fname)"><variable ilk="argument" line="726" name="fname" /></scope><scope ilk="function" line="735" lineend="748" name="get_py2exe_datafiles" returns="list()" signature="get_py2exe_datafiles()"><variable citdl="get_data_path()" line="736" name="datapath" /><variable attributes="protected" line="737" name="_" /><variable line="737" name="tail" /><variable citdl="dict" line="738" name="d" /><variable citdl="root.replace()" line="739" name="root" /><variable citdl="list" line="739" name="files" /></scope><scope doc="Get the location of the config file.&#10;&#10;The file location is determined in the following order&#10;&#10;- `$PWD/matplotlibrc`&#10;&#10;- `$MATPLOTLIBRC/matplotlibrc`&#10;&#10;- `$MPLCONFIGDIR/matplotlibrc`&#10;&#10;- On Linux,&#10;&#10;      - `$HOME/.matplotlib/matplotlibrc`, if it exists&#10;&#10;      - or `$XDG_CONFIG_HOME/matplotlib/matplotlibrc` (if&#10;        $XDG_CONFIG_HOME is defined)&#10;&#10;      - or `$HOME/.config/matplotlib/matplotlibrc` (if&#10;        $XDG_CONFIG_HOME is not defined)&#10;&#10;- On other platforms,&#10;&#10;     - `$HOME/.matplotlib/matplotlibrc` if `$HOME` is defined.&#10;&#10;- Lastly, it looks in `$MATPLOTLIBDATA/matplotlibrc` for a&#10;  system-defined copy." ilk="function" line="751" lineend="821" name="matplotlib_fname" returns="os.path.join()" signature="matplotlib_fname()"><variable citdl="os.getcwd()" line="781" name="cwd" /><variable citdl="os.path.join()" line="784" name="fname" /><variable citdl="get_data_path()" line="789" name="path" /><variable citdl="_get_configdir()" line="795" name="configdir" /><variable citdl="get_home()" line="799" name="home" /></scope><variable attributes="protected" citdl="dict" line="827" name="_deprecated_map" /><variable attributes="protected" citdl="dict" line="841" name="_deprecated_ignore_map" /><variable attributes="protected" citdl="set()" line="844" name="_obsolete_set" /><variable attributes="protected" citdl="set()" line="845" name="_all_deprecated" /><scope classrefs="dict" doc="A dictionary object including validation&#10;&#10;validating functions are defined and associated with rc parameters in&#10;:mod:`matplotlib.rcsetup`" ilk="class" line="849" lineend="959" name="RcParams"><variable citdl="dict()" line="858" name="validate" /><variable citdl="str" line="861" name="msg_depr" /><variable citdl="str" line="862" name="msg_depr_ignore" /><scope attributes="__ctor__" ilk="function" line="865" lineend="867" name="__init__" signature="RcParams()"><variable attributes="kwargs" citdl="RcParams" ilk="argument" line="865" name="self" /><variable line="866" name="v" /><variable line="866" name="k" /></scope><scope ilk="function" line="869" lineend="887" name="__setitem__" signature="__setitem__(key, val)"><variable citdl="RcParams" ilk="argument" line="869" name="self" /><variable citdl="alt_key" ilk="argument" line="869" name="key" /><variable citdl="alt_val()" ilk="argument" line="869" name="val" /><variable line="877" name="alt" /><variable line="881" name="cval" /></scope><scope ilk="function" line="889" lineend="905" name="__getitem__" returns="dict.__getitem__()" signature="__getitem__(key)"><variable citdl="RcParams" ilk="argument" line="889" name="self" /><variable citdl="alt_key" ilk="argument" line="889" name="key" /><variable line="890" name="inverse_alt" /><variable line="897" name="alt" /><variable citdl="dict.__getitem__()" line="901" name="val" /></scope><scope ilk="function" line="913" lineend="915" name="update" signature="update()"><variable attributes="kwargs" citdl="RcParams" ilk="argument" line="913" name="self" /><variable line="914" name="v" /><variable line="914" name="k" /></scope><scope ilk="function" line="917" lineend="924" name="__repr__" returns="__builtins__.str.format()" signature="__repr__()"><import line="918" module="pprint" /><variable citdl="RcParams" ilk="argument" line="917" name="self" /><variable citdl="self.__class__.__name__" line="919" name="class_name" /><variable line="920" name="indent" /><variable line="921" name="repr_split" /><variable line="923" name="repr_indented" /></scope><scope ilk="function" line="926" lineend="928" name="__str__" returns="__builtins__.str.join()" signature="__str__()"><variable citdl="RcParams" ilk="argument" line="926" name="self" /></scope><scope doc="Return sorted list of keys." ilk="function" line="930" lineend="936" name="keys" returns="list()" signature="keys()"><variable citdl="RcParams" ilk="argument" line="930" name="self" /><variable citdl="list()" line="934" name="k" /></scope><scope doc="Return values in order of sorted keys." ilk="function" line="938" lineend="942" name="values" returns="list" signature="values()"><variable citdl="RcParams" ilk="argument" line="938" name="self" /></scope><scope doc="Return the subset of this RcParams dictionary whose keys match,&#10;using :func:`re.search`, the given ``pattern``.&#10;&#10;.. note::&#10;&#10;    Changes to the returned dictionary are *not* propagated to&#10;    the parent RcParams dictionary." ilk="function" line="944" lineend="959" name="find_all" returns="RcParams" signature="find_all(pattern)"><import line="955" module="re" /><variable citdl="RcParams" ilk="argument" line="944" name="self" /><variable ilk="argument" line="944" name="pattern" /><variable citdl="re.compile()" line="956" name="pattern_re" /></scope></scope><scope doc="Return a :class:`matplotlib.RcParams` instance from the&#10;default matplotlib rc file." ilk="function" line="962" lineend="976" name="rc_params" returns="RcParams" signature="rc_params(fail_on_error=False)"><variable citdl="False" ilk="argument" line="962" name="fail_on_error" /><variable citdl="matplotlib_fname()" line="966" name="fname" /><variable citdl="str" line="969" name="message" /><variable citdl="RcParams" line="970" name="ret" /></scope><variable citdl="re.compile()" line="979" name="URL_REGEX" /><scope doc="Return True if string is an http, ftp, or file URL path." ilk="function" line="982" lineend="984" name="is_url" returns="bool" signature="is_url(filename)"><variable ilk="argument" line="982" name="filename" /></scope><scope attributes="protected" ilk="function" line="987" lineend="990" name="_url_lines" signature="_url_lines(f)"><variable ilk="argument" line="987" name="f" /><variable line="989" name="line" /></scope><scope attributes="protected" ilk="function" line="993" lineend="993" name="_open_file_or_url" signature="_open_file_or_url(fname)"><variable citdl="os.path.expanduser()" ilk="argument" line="993" name="fname" /><variable citdl="urlopen()" line="996" name="f" /><variable citdl="str" line="1001" name="encoding" /></scope><variable attributes="protected" citdl="str" line="1008" name="_error_details_fmt" /><scope attributes="protected" doc="Return :class:`matplotlib.RcParams` from the contents of the given file.&#10;&#10;Unlike `rc_params_from_file`, the configuration class only contains the&#10;parameters specified in the file (i.e. default values are not filled in)." ilk="function" line="1011" lineend="1084" name="_rc_params_in_file" returns="RcParams" signature="_rc_params_in_file(fname, fail_on_error=False)"><variable ilk="argument" line="1011" name="fname" /><variable citdl="False" ilk="argument" line="1011" name="fail_on_error" /><variable citdl="int" line="1017" name="cnt" /><variable citdl="dict" line="1018" name="rc_temp" /><variable line="1021" name="line" /><variable line="1023" name="strippedline" /><variable citdl="strippedline.split()" line="1026" name="tup" /><variable line="1028" name="error_details" /><variable citdl="key.strip()" line="1032" name="key" /><variable citdl="val.strip()" line="1033" name="val" /><variable citdl="RcParams" line="1045" name="config" /></scope><scope doc="Return :class:`matplotlib.RcParams` from the contents of the given file.&#10;&#10;Parameters&#10;----------&#10;fname : str&#10;    Name of file parsed for matplotlib settings.&#10;fail_on_error : bool&#10;    If True, raise an error when the parser fails to convert a parameter.&#10;use_default_template : bool&#10;    If True, initialize with default parameters before updating with those&#10;    in the given file. If False, the configuration class only contains the&#10;    parameters specified in the file. (Useful for updating dicts.)" ilk="function" line="1087" lineend="1128" name="rc_params_from_file" returns="RcParams" signature="rc_params_from_file(fname, fail_on_error=False, use_default_template=True)"><variable ilk="argument" line="1087" name="fname" /><variable citdl="False" ilk="argument" line="1087" name="fail_on_error" /><variable citdl="True" ilk="argument" line="1087" name="use_default_template" /><variable citdl="_rc_params_in_file()" line="1101" name="config_from_file" /><variable citdl="six.iteritems()" line="1106" name="iter_params" /><variable citdl="RcParams" line="1107" name="config" /></scope><variable citdl="rc_params()" line="1132" name="rcParams" /><variable attributes="protected" line="1140" name="_fname" /><variable attributes="protected" citdl="os.path.realpath()" line="1140" name="_basedir" /><variable attributes="protected" citdl="os.path.join()" line="1145" name="_fullpath" /><variable citdl="rcParams.copy()" line="1148" name="rcParamsOrig" /><variable citdl="RcParams" line="1150" name="rcParamsDefault" /><scope doc="Set the current rc params.  Group is the grouping for the rc, e.g.,&#10;for ``lines.linewidth`` the group is ``lines``, for&#10;``axes.facecolor``, the group is ``axes``, and so on.  Group may&#10;also be a list or tuple of group names, e.g., (*xtick*, *ytick*).&#10;*kwargs* is a dictionary attribute name/value pairs, e.g.,::&#10;&#10;  rc('lines', linewidth=2, color='r')&#10;&#10;sets the current rc params and is equivalent to::&#10;&#10;  rcParams['lines.linewidth'] = 2&#10;  rcParams['lines.color'] = 'r'&#10;&#10;The following aliases are available to save typing for interactive&#10;users:&#10;&#10;=====   =================&#10;Alias   Property&#10;=====   =================&#10;'lw'    'linewidth'&#10;'ls'    'linestyle'&#10;'c'     'color'&#10;'fc'    'facecolor'&#10;'ec'    'edgecolor'&#10;'mew'   'markeredgewidth'&#10;'aa'    'antialiased'&#10;=====   =================&#10;&#10;Thus you could abbreviate the above rc command as::&#10;&#10;      rc('lines', lw=2, c='r')&#10;&#10;&#10;Note you can use python's kwargs dictionary facility to store&#10;dictionaries of default parameters.  e.g., you can customize the&#10;font rc as follows::&#10;&#10;  font = {'family' : 'monospace',&#10;          'weight' : 'bold',&#10;          'size'   : 'larger'}&#10;&#10;  rc('font', **font)  # pass in the font dict as kwargs&#10;&#10;This enables you to easily switch between several configurations.&#10;Use :func:`~matplotlib.pyplot.rcdefaults` to restore the default&#10;rc params after changes." ilk="function" line="1163" lineend="1233" name="rc" signature="rc(**group)"><variable attributes="kwargs" citdl="tuple" ilk="argument" line="1163" name="group" /><variable citdl="dict" line="1213" name="aliases" /><variable line="1225" name="g" /><variable line="1226" name="k" /><variable line="1226" name="v" /><variable citdl="aliases.get()" line="1227" name="name" /><variable line="1228" name="key" /></scope><scope doc="Restore the default rc params.  These are not the params loaded by&#10;the rc file, but mpl's internal params.  See rc_file_defaults for&#10;reloading the default params from the rc file" ilk="function" line="1236" lineend="1243" name="rcdefaults" signature="rcdefaults()" /><scope doc="Update rc params from file." ilk="function" line="1246" lineend="1250" name="rc_file" signature="rc_file(fname)"><variable ilk="argument" line="1246" name="fname" /></scope><scope classrefs="object" doc="Return a context manager for managing rc settings.&#10;&#10;This allows one to do::&#10;&#10;    with mpl.rc_context(fname='screen.rc'):&#10;        plt.plot(x, a)&#10;        with mpl.rc_context(fname='print.rc'):&#10;            plt.plot(x, b)&#10;        plt.plot(x, c)&#10;&#10;The 'a' vs 'x' and 'c' vs 'x' plots would have settings from&#10;'screen.rc', while the 'b' vs 'x' plot would have settings from&#10;'print.rc'.&#10;&#10;A dictionary can also be passed to the context manager::&#10;&#10;    with mpl.rc_context(rc={'text.usetex': True}, fname='screen.rc'):&#10;        plt.plot(x, a)&#10;&#10;The 'rc' dictionary takes precedence over the settings loaded from&#10;'fname'.  Passing a dictionary only is also valid." ilk="class" line="1253" lineend="1297" name="rc_context"><scope attributes="__ctor__" ilk="function" line="1278" lineend="1291" name="__init__" signature="rc_context(rc=None, fname=None)"><variable citdl="rc_context" ilk="argument" line="1278" name="self" /><variable ilk="argument" line="1278" name="rc" /><variable ilk="argument" line="1278" name="fname" /></scope><variable attributes="__instancevar__" line="1279" name="rcdict" /><variable attributes="__instancevar__" line="1280" name="fname" /><variable attributes="protected __instancevar__" citdl="rcParams.copy()" line="1281" name="_rcparams" /><scope ilk="function" line="1293" lineend="1294" name="__enter__" returns="rc_context" signature="__enter__()"><variable citdl="rc_context" ilk="argument" line="1293" name="self" /></scope><scope ilk="function" line="1296" lineend="1297" name="__exit__" signature="__exit__(type, value, tb)"><variable citdl="rc_context" ilk="argument" line="1296" name="self" /><variable ilk="argument" line="1296" name="type" /><variable ilk="argument" line="1296" name="value" /><variable ilk="argument" line="1296" name="tb" /></scope></scope><scope doc="Restore the default rc params from the original matplotlib rc that&#10;was loaded" ilk="function" line="1300" lineend="1305" name="rc_file_defaults" signature="rc_file_defaults()" /><variable attributes="protected" citdl="str" line="1307" name="_use_error_msg" /><scope doc="Set the matplotlib backend to one of the known backends.&#10;&#10;The argument is case-insensitive. *warn* specifies whether a&#10;warning should be issued if a backend has already been set up.&#10;*force* is an **experimental** flag that tells matplotlib to&#10;attempt to initialize a new backend by reloading the backend&#10;module.&#10;&#10;.. note::&#10;&#10;    This function must be called *before* importing pyplot for&#10;    the first time; or, if you are not using pyplot, it must be called&#10;    before importing matplotlib.backends.  If warn is True, a warning&#10;    is issued if you try and call this after pylab or pyplot have been&#10;    loaded.  In certain black magic use cases, e.g.&#10;    :func:`pyplot.switch_backend`, we are doing the reloading necessary to&#10;    make the backend switch work (in some cases, e.g., pure image&#10;    backends) so one can set warn=False to suppress the warnings.&#10;&#10;To find out which backend is currently set, see&#10;:func:`matplotlib.get_backend`." ilk="function" line="1314" lineend="1366" name="use" signature="use(arg, warn=True, force=False)"><variable citdl="arg.lower()" ilk="argument" line="1314" name="arg" /><variable citdl="True" ilk="argument" line="1314" name="warn" /><variable citdl="False" ilk="argument" line="1314" name="force" /><variable citdl="validate_backend()" line="1341" name="name" /><variable citdl="True" line="1356" name="need_reload" /></scope><scope doc="Return the name of the current backend." ilk="function" line="1369" lineend="1371" name="get_backend" signature="get_backend()" /><scope doc="Set interactive mode to boolean b.&#10;&#10;If b is True, then draw after every plotting command, e.g., after xlabel" ilk="function" line="1374" lineend="1380" name="interactive" signature="interactive(b)"><variable ilk="argument" line="1374" name="b" /></scope><scope doc="Return true if plot mode is interactive" ilk="function" line="1383" lineend="1385" name="is_interactive" signature="is_interactive()" /><scope doc="Return true if focus maintenance under TkAgg on win32 is on.&#10;This currently works only for python.exe and IPython.exe.&#10;Both IDLE and Pythonwin.exe fail badly when tk_window_focus is on." ilk="function" line="1388" lineend="1394" name="tk_window_focus" returns="bool" signature="tk_window_focus()" /><variable line="1401" name="s" /><variable citdl="list" line="1423" name="default_test_modules" /><scope ilk="function" line="1488" lineend="1500" name="verify_test_dependencies" signature="verify_test_dependencies()"><import line="1493" module="nose" /><import line="1495" module="unittest" symbol="mock" /><import line="1497" module="mock" /></scope><scope doc="run the matplotlib test suite" ilk="function" line="1503" lineend="1543" name="test" returns="nose.run()" signature="test(verbosity=1)"><import line="1507" module="faulthandler" /><import line="1516" module="nose" /><import line="1517" module="nose.plugins.builtin" /><import line="1518" module=".testing.noseclasses" symbol="KnownFailure" /><import line="1519" module="nose.plugins.manager" symbol="PluginManager" /><import line="1520" module="nose.plugins" symbol="multiprocess" /><variable citdl="int" ilk="argument" line="1503" name="verbosity" /><variable line="1513" name="old_backend" /><variable citdl="list" line="1523" name="plugins" /><variable citdl="PluginManager()" line="1527" name="manager" /><variable citdl="nose.config.Config()" line="1528" name="config" /><variable citdl="nose.run()" line="1535" name="success" /><variable citdl="False" line="1545" name="__test__" /></scope><scope attributes="protected" ilk="function" line="1548" lineend="1557" name="_replacer" signature="_replacer(data, key)"><variable ilk="argument" line="1548" name="data" /><variable ilk="argument" line="1548" name="key" /></scope><variable attributes="protected" citdl="str" line="1560" name="_DATA_DOC_APPENDIX" /><scope doc="A decorator to add a 'data' kwarg to any a function.  The signature&#10;of the input function must include the ax argument at the first position ::&#10;&#10;   def foo(ax, *args, **kwargs)&#10;&#10;so this is suitable for use with Axes methods.&#10;&#10;Parameters&#10;----------&#10;replace_names : list of strings, optional, default: None&#10;    The list of parameter names which arguments should be replaced by&#10;    `data[name]`. If None, all arguments are replaced if they are&#10;    included in `data`.&#10;replace_all_args : bool, default: False&#10;    If True, all arguments in *args get replaced, even if they are not&#10;    in replace_names.&#10;label_namer : string, optional, default: None&#10;    The name of the parameter which argument should be used as label, if&#10;    label is not set. If None, the label keyword argument is not set.&#10;positional_parameter_names : list of strings or callable, optional&#10;    The full list of positional parameter names (excluding an explicit&#10;    `ax`/'self' argument at the first place and including all possible&#10;    positional parameter in `*args`), in the right order. Can also include&#10;    all other keyword parameter. Only needed if the wrapped function does&#10;    contain `*args` and (replace_names is not None or replace_all_args is&#10;    False). If it is a callable, it will be called with the actual&#10;    tuple of *args and the data and should return a list like&#10;    above.&#10;    NOTE: callables should only be used when the names and order of *args&#10;    can only be determined at runtime. Please use list of names&#10;    when the order and names of *args is clear before runtime!" ilk="function" line="1573" lineend="1835" name="unpack_labeled_data" returns="unpack_labeled_data.param" signature="unpack_labeled_data(replace_names=None, replace_all_args=False, label_namer=None, positional_parameter_names=None)"><variable citdl="set()" ilk="argument" line="1573" name="replace_names" /><variable citdl="False" ilk="argument" line="1573" name="replace_all_args" /><variable ilk="argument" line="1573" name="label_namer" /><variable ilk="argument" line="1573" name="positional_parameter_names" /><scope ilk="function" line="1611" lineend="1834" name="param" returns="unpack_labeled_data.param.inner" signature="param(func)"><import line="1620" module="IPython.utils.signatures" /><variable ilk="argument" line="1611" name="func" /><variable citdl="sig.replace()" line="1612" name="new_sig" /><variable citdl="bool" line="1613" name="python_has_signature" /><variable citdl="bool" line="1614" name="python_has_wrapped" /><variable citdl="inspect.signature" line="1621" name="signature" /><variable citdl="IPython.utils.signatures.Parameter" line="1622" name="Parameter" /><variable citdl="inspect.getargspec()" line="1633" name="arg_spec" /><variable attributes="protected" citdl="list" line="1634" name="_arg_names" /><variable attributes="protected" citdl="True" line="1635" name="_has_varargs" /><variable attributes="protected" citdl="True" line="1636" name="_has_varkwargs" /><variable citdl="signature()" line="1638" name="sig" /><variable citdl="list()" line="1642" name="params" /><variable line="1643" name="p" /><variable citdl="Parameter()" line="1650" name="data_param" /><variable citdl="False" line="1659" name="arg_names_at_runtime" /><variable citdl="list" line="1667" name="arg_names" /><variable citdl="str" line="1683" name="msg" /><variable citdl="arg_names.index()" line="1708" name="label_pos" /><variable citdl="arg_names.index()" line="1709" name="label_namer_pos" /><scope ilk="function" line="1734" lineend="1734" name="inner" returns="unpack_labeled_data.param.func()" signature="inner(**ax)"><import line="1806" module="warnings" /><variable attributes="kwargs" ilk="argument" line="1734" name="ax" /><variable attributes="protected" citdl="arg_names.index()" line="1740" name="_label_pos" /><variable attributes="protected" citdl="arg_names.index()" line="1741" name="_label_namer_pos" /><variable attributes="protected" citdl="list" line="1742" name="_arg_names" /><variable citdl="kwargs.get()" line="1744" name="label" /><variable citdl="kwargs.pop()" line="1746" name="data" /><variable citdl="tuple()" line="1771" name="args" /><variable citdl="dict()" line="1785" name="kwargs" /><variable citdl="bool" line="1796" name="user_supplied_label" /><variable citdl="str" line="1807" name="msg" /><variable line="1828" name="__doc__" /><variable line="1831" name="__wrapped__" /><variable citdl="sig.replace()" line="1833" name="__signature__" /></scope><variable citdl="inner.__doc__" line="1814" name="pre_doc" /><variable attributes="protected" citdl="str" line="1819" name="_repl" /></scope></scope></scope>