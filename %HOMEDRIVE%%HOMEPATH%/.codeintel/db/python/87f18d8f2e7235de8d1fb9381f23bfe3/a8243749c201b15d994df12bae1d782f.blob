<scope ilk="blob" lang="Python" name="matlib" src="d:\Program Files (x86)\Python35-32\lib\site-packages\numpy\matlib.py"><import line="1" module="__future__" symbol="division" /><import line="1" module="__future__" symbol="absolute_import" /><import line="1" module="__future__" symbol="print_function" /><import alias="np" line="3" module="numpy" /><import line="4" module="numpy.matrixlib.defmatrix" symbol="matrix" /><import line="4" module="numpy.matrixlib.defmatrix" symbol="asmatrix" /><import line="6" module="numpy" symbol="*" /><variable citdl="np.__version__" line="8" name="__version__" /><variable line="10" name="__all__" /><scope doc="Return a new matrix of given shape and type, without initializing entries.&#10;&#10;Parameters&#10;----------&#10;shape : int or tuple of int&#10;    Shape of the empty matrix.&#10;dtype : data-type, optional&#10;    Desired output data-type.&#10;order : {'C', 'F'}, optional&#10;    Whether to store multi-dimensional data in row-major&#10;    (C-style) or column-major (Fortran-style) order in&#10;    memory.&#10;&#10;See Also&#10;--------&#10;empty_like, zeros&#10;&#10;Notes&#10;-----&#10;`empty`, unlike `zeros`, does not set the matrix values to zero,&#10;and may therefore be marginally faster.  On the other hand, it requires&#10;the user to manually set all the values in the array, and should be&#10;used with caution.&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; np.matlib.empty((2, 2))    # filled with random data&#10;matrix([[  6.76425276e-320,   9.79033856e-307],&#10;        [  7.39337286e-309,   3.22135945e-309]])        #random&#10;&gt;&gt;&gt; np.matlib.empty((2, 2), dtype=int)&#10;matrix([[ 6600475,        0],&#10;        [ 6586976, 22740995]])                          #random" ilk="function" line="13" lineend="49" name="empty" returns="ndarray.__new__()" signature="empty(shape, dtype=None, order='C')"><variable ilk="argument" line="13" name="shape" /><variable ilk="argument" line="13" name="dtype" /><variable citdl="str" ilk="argument" line="13" name="order" /></scope><scope doc="Matrix of ones.&#10;&#10;Return a matrix of given shape and type, filled with ones.&#10;&#10;Parameters&#10;----------&#10;shape : {sequence of ints, int}&#10;    Shape of the matrix&#10;dtype : data-type, optional&#10;    The desired data-type for the matrix, default is np.float64.&#10;order : {'C', 'F'}, optional&#10;    Whether to store matrix in C- or Fortran-contiguous order,&#10;    default is 'C'.&#10;&#10;Returns&#10;-------&#10;out : matrix&#10;    Matrix of ones of given shape, dtype, and order.&#10;&#10;See Also&#10;--------&#10;ones : Array of ones.&#10;matlib.zeros : Zero matrix.&#10;&#10;Notes&#10;-----&#10;If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,&#10;`out` becomes a single row matrix of shape ``(1,N)``.&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; np.matlib.ones((2,3))&#10;matrix([[ 1.,  1.,  1.],&#10;        [ 1.,  1.,  1.]])&#10;&#10;&gt;&gt;&gt; np.matlib.ones(2)&#10;matrix([[ 1.,  1.]])" ilk="function" line="51" lineend="94" name="ones" returns="ndarray.__new__()" signature="ones(shape, dtype=None, order='C')"><variable ilk="argument" line="51" name="shape" /><variable ilk="argument" line="51" name="dtype" /><variable citdl="str" ilk="argument" line="51" name="order" /><variable citdl="ndarray.__new__()" line="92" name="a" /></scope><scope doc="Return a matrix of given shape and type, filled with zeros.&#10;&#10;Parameters&#10;----------&#10;shape : int or sequence of ints&#10;    Shape of the matrix&#10;dtype : data-type, optional&#10;    The desired data-type for the matrix, default is float.&#10;order : {'C', 'F'}, optional&#10;    Whether to store the result in C- or Fortran-contiguous order,&#10;    default is 'C'.&#10;&#10;Returns&#10;-------&#10;out : matrix&#10;    Zero matrix of given shape, dtype, and order.&#10;&#10;See Also&#10;--------&#10;numpy.zeros : Equivalent array function.&#10;matlib.ones : Return a matrix of ones.&#10;&#10;Notes&#10;-----&#10;If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,&#10;`out` becomes a single row matrix of shape ``(1,N)``.&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; np.matlib.zeros((2, 3))&#10;matrix([[ 0.,  0.,  0.],&#10;        [ 0.,  0.,  0.]])&#10;&#10;&gt;&gt;&gt; np.matlib.zeros(2)&#10;matrix([[ 0.,  0.]])" ilk="function" line="96" lineend="138" name="zeros" returns="ndarray.__new__()" signature="zeros(shape, dtype=None, order='C')"><variable ilk="argument" line="96" name="shape" /><variable ilk="argument" line="96" name="dtype" /><variable citdl="str" ilk="argument" line="96" name="order" /><variable citdl="ndarray.__new__()" line="136" name="a" /></scope><scope doc="Returns the square identity matrix of given size.&#10;&#10;Parameters&#10;----------&#10;n : int&#10;    Size of the returned identity matrix.&#10;dtype : data-type, optional&#10;    Data-type of the output. Defaults to ``float``.&#10;&#10;Returns&#10;-------&#10;out : matrix&#10;    `n` x `n` matrix with its main diagonal set to one,&#10;    and all other elements zero.&#10;&#10;See Also&#10;--------&#10;numpy.identity : Equivalent array function.&#10;matlib.eye : More general matrix identity function.&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; np.matlib.identity(3, dtype=int)&#10;matrix([[1, 0, 0],&#10;        [0, 1, 0],&#10;        [0, 0, 1]])" ilk="function" line="140" lineend="174" name="identity" returns="empty()" signature="identity(n, dtype=None)"><variable ilk="argument" line="140" name="n" /><variable ilk="argument" line="140" name="dtype" /><variable citdl="array()" line="171" name="a" /><variable citdl="empty()" line="172" name="b" /></scope><scope doc="Return a matrix with ones on the diagonal and zeros elsewhere.&#10;&#10;Parameters&#10;----------&#10;n : int&#10;    Number of rows in the output.&#10;M : int, optional&#10;    Number of columns in the output, defaults to `n`.&#10;k : int, optional&#10;    Index of the diagonal: 0 refers to the main diagonal,&#10;    a positive value refers to an upper diagonal,&#10;    and a negative value to a lower diagonal.&#10;dtype : dtype, optional&#10;    Data-type of the returned matrix.&#10;&#10;Returns&#10;-------&#10;I : matrix&#10;    A `n` x `M` matrix where all elements are equal to zero,&#10;    except for the `k`-th diagonal, whose values are equal to one.&#10;&#10;See Also&#10;--------&#10;numpy.eye : Equivalent array function.&#10;identity : Square identity matrix.&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; np.matlib.eye(3, k=1, dtype=float)&#10;matrix([[ 0.,  1.,  0.],&#10;        [ 0.,  0.,  1.],&#10;        [ 0.,  0.,  0.]])" ilk="function" line="176" lineend="213" name="eye" returns="asmatrix()" signature="eye(n, M=None, k=0, dtype=float)"><variable ilk="argument" line="176" name="n" /><variable ilk="argument" line="176" name="M" /><variable citdl="int" ilk="argument" line="176" name="k" /><variable citdl="float" ilk="argument" line="176" name="dtype" /></scope><scope doc="Return a matrix of random values with given shape.&#10;&#10;Create a matrix of the given shape and propagate it with&#10;random samples from a uniform distribution over ``[0, 1)``.&#10;&#10;Parameters&#10;----------&#10;\*args : Arguments&#10;    Shape of the output.&#10;    If given as N integers, each integer specifies the size of one&#10;    dimension.&#10;    If given as a tuple, this tuple gives the complete shape.&#10;&#10;Returns&#10;-------&#10;out : ndarray&#10;    The matrix of random values with shape given by `\*args`.&#10;&#10;See Also&#10;--------&#10;randn, numpy.random.rand&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; np.matlib.rand(2, 3)&#10;matrix([[ 0.68340382,  0.67926887,  0.83271405],&#10;        [ 0.00793551,  0.20468222,  0.95253525]])       #random&#10;&gt;&gt;&gt; np.matlib.rand((2, 3))&#10;matrix([[ 0.84682055,  0.73626594,  0.11308016],&#10;        [ 0.85429008,  0.3294825 ,  0.89139555]])       #random&#10;&#10;If the first argument is a tuple, other arguments are ignored:&#10;&#10;&gt;&gt;&gt; np.matlib.rand((2, 3), 4)&#10;matrix([[ 0.46898646,  0.15163588,  0.95188261],&#10;        [ 0.59208621,  0.09561818,  0.00583606]])       #random" ilk="function" line="215" lineend="258" name="rand" returns="asmatrix()" signature="rand()"><variable line="257" name="args" /></scope><scope doc="Return a random matrix with data from the &quot;standard normal&quot; distribution.&#10;&#10;`randn` generates a matrix filled with random floats sampled from a&#10;univariate &quot;normal&quot; (Gaussian) distribution of mean 0 and variance 1.&#10;&#10;Parameters&#10;----------&#10;\*args : Arguments&#10;    Shape of the output.&#10;    If given as N integers, each integer specifies the size of one&#10;    dimension. If given as a tuple, this tuple gives the complete shape.&#10;&#10;Returns&#10;-------&#10;Z : matrix of floats&#10;    A matrix of floating-point samples drawn from the standard normal&#10;    distribution.&#10;&#10;See Also&#10;--------&#10;rand, random.randn&#10;&#10;Notes&#10;-----&#10;For random samples from :math:`N(\mu, \sigma^2)`, use:&#10;&#10;``sigma * np.matlib.randn(...) + mu``&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; np.matlib.randn(1)&#10;matrix([[-0.09542833]])                                 #random&#10;&gt;&gt;&gt; np.matlib.randn(1, 2, 3)&#10;matrix([[ 0.16198284,  0.0194571 ,  0.18312985],&#10;        [-0.7509172 ,  1.61055   ,  0.45298599]])       #random&#10;&#10;Two-by-four matrix of samples from :math:`N(3, 6.25)`:&#10;&#10;&gt;&gt;&gt; 2.5 * np.matlib.randn((2, 4)) + 3&#10;matrix([[ 4.74085004,  8.89381862,  4.09042411,  4.83721922],&#10;        [ 7.52373709,  5.07933944, -2.64043543,  0.45610557]])  #random" ilk="function" line="260" lineend="308" name="randn" returns="asmatrix()" signature="randn()"><variable line="307" name="args" /></scope><scope doc="Repeat a 0-D to 2-D array or matrix MxN times.&#10;&#10;Parameters&#10;----------&#10;a : array_like&#10;    The array or matrix to be repeated.&#10;m, n : int&#10;    The number of times `a` is repeated along the first and second axes.&#10;&#10;Returns&#10;-------&#10;out : ndarray&#10;    The result of repeating `a`.&#10;&#10;Examples&#10;--------&#10;&gt;&gt;&gt; import numpy.matlib&#10;&gt;&gt;&gt; a0 = np.array(1)&#10;&gt;&gt;&gt; np.matlib.repmat(a0, 2, 3)&#10;array([[1, 1, 1],&#10;       [1, 1, 1]])&#10;&#10;&gt;&gt;&gt; a1 = np.arange(4)&#10;&gt;&gt;&gt; np.matlib.repmat(a1, 2, 2)&#10;array([[0, 1, 2, 3, 0, 1, 2, 3],&#10;       [0, 1, 2, 3, 0, 1, 2, 3]])&#10;&#10;&gt;&gt;&gt; a2 = np.asmatrix(np.arange(6).reshape(2, 3))&#10;&gt;&gt;&gt; np.matlib.repmat(a2, 2, 3)&#10;matrix([[0, 1, 2, 0, 1, 2, 0, 1, 2],&#10;        [3, 4, 5, 3, 4, 5, 3, 4, 5],&#10;        [0, 1, 2, 0, 1, 2, 0, 1, 2],&#10;        [3, 4, 5, 3, 4, 5, 3, 4, 5]])" ilk="function" line="310" lineend="358" name="repmat" returns="c.reshape()" signature="repmat(a, m, n)"><variable citdl="asanyarray()" ilk="argument" line="310" name="a" /><variable ilk="argument" line="310" name="m" /><variable ilk="argument" line="310" name="n" /><variable citdl="a.ndim" line="348" name="ndim" /><variable citdl="int" line="350" name="origcols" /><variable citdl="int" line="350" name="origrows" /><variable line="355" name="rows" /><variable line="356" name="cols" /><variable line="357" name="c" /></scope></scope>